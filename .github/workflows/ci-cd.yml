name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
      - feature/*
  pull_request:
    branches:
      - main
      - dev

jobs:
  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🔧 Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 🚀 Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: 🛠️ Grant execute permissions for Maven Wrapper
        run: chmod +x ./mvnw

      - name: ✅ Build and run tests
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_APPLICATION_NAME: ${{ secrets.SPRING_APPLICATION_NAME }}
          SERVER_PORT: ${{ vars.SERVER_PORT }}
          SPRING_SECURITY_USER_NAME: ${{ secrets.SPRING_SECURITY_USER_NAME }}
          SPRING_SECURITY_USER_PASSWORD: ${{ secrets.SPRING_SECURITY_USER_PASSWORD }}
          ORLEANS_STAY_APP_JWT_SECRET: ${{ secrets.ORLEANS_STAY_APP_JWT_SECRET }}
          ORLEANS_STAY_APP_JWT_EXPIRATIONMS: ${{ secrets.ORLEANS_STAY_APP_JWT_EXPIRATIONMS }}
          ORLEANS_STAY_APP_JWT_EXPIRATIONNEWPASSWORDTOKENMS: ${{ secrets.ORLEANS_STAY_APP_JWT_EXPIRATIONNEWPASSWORDTOKENMS }}
          WEB_CORS_ALLOWEDORIGINS: ${{ secrets.WEB_CORS_ALLOWEDORIGINS }}
          WEB_CORS_ALLOWEDMETHODS: ${{ secrets.WEB_CORS_ALLOWEDMETHODS }}
          WEB_CORS_ALLOWCREDENTIALS: ${{ secrets.WEB_CORS_ALLOWCREDENTIALS }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          CLOUDINARY_FOLDER: ${{ secrets.CLOUDINARY_FOLDER }}
          MAILJET_API_KEY: ${{ secrets.MAILJET_API_KEY }}
          MAILJET_SECRET_KEY: ${{ secrets.MAILJET_SECRET_KEY }}
          MAILJET_RESA_ACCEPTE_TEMPLATE_ID: ${{ secrets.MAILJET_RESA_ACCEPTE_TEMPLATE_ID }}
          MAILJET_DEMANDE_RESA_TEMPLATE_ID: ${{ secrets.MAILJET_DEMANDE_RESA_TEMPLATE_ID }}
          MAILJET_DEMANDE_ARRHES_TEMPLATE_ID: ${{ secrets.MAILJET_DEMANDE_ARRHES_TEMPLATE_ID }}
          MAILJET_RESA_REFUSEE_TEMPLATE_ID: ${{ secrets.MAILJET_RESA_REFUSEE_TEMPLATE_ID }}
          MAILJET_RESA_ANNULEE_TEMPLATE_ID: ${{ secrets.MAILJET_RESA_ANNULEE_TEMPLATE_ID }}
          MAILJET_REINITIALISATION_MDP_TEMPLATE_ID: ${{ secrets.MAILJET_REINITIALISATION_MDP_TEMPLATE_ID }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          DOMAIN_EMAIL: ${{ secrets.DOMAIN_EMAIL}}
        run: ./mvnw clean test

  deploy:
    name: Deploy Application
    needs: build-and-test  # Déployer seulement si les tests réussissent
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Déployer uniquement sur main

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Add SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "echo 'SSH connection successful!'"

      - name: Clone or update project on server
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
          if [ -d /home/${{ secrets.SERVER_USER }}/orleans-stay-api ]; then
            if [ -d /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.git ]; then
              echo 'Repository already exists. Pulling latest changes...';
              cd /home/${{ secrets.SERVER_USER }}/orleans-stay-api;
              git reset --hard;
              git pull origin main;
            else
              echo 'Invalid directory exists. Cleaning up and cloning again...';
              rm -rf /home/${{ secrets.SERVER_USER }}/orleans-stay-api;
              git clone git@github.com:${{ secrets.REPOSITORY_NAME }} /home/${{ secrets.SERVER_USER }}/orleans-stay-api;
            fi
          else
            echo 'Cloning repository...';
            git clone git@github.com:${{ secrets.REPOSITORY_NAME }} /home/${{ secrets.SERVER_USER }}/orleans-stay-api;
          fi
          "

      - name: Generate .env file on server
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
          echo 'SPRING_PROFILES_ACTIVE=prod' > /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'DB_NAME=${{ secrets.DB_NAME }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'SPRING_APPLICATION_NAME =${{ secrets.SPRING_APPLICATION_NAME  }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'SPRING_JPA_HIBERNATE_DDL_AUTO=${{ secrets.SPRING_JPA_HIBERNATE_DDL_AUTO }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'SERVER_PORT=${{ vars.SERVER_PORT }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL=${{ secrets.SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=${{ secrets.SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'LOGGING_LEVEL_ROOT=${{ secrets.LOGGING_LEVEL_ROOT }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'LOGGING_LEVEL_COM_FORMATIONAPI=${{ secrets.LOGGING_LEVEL_COM_FORMATIONAPI }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_BOOT_WEB_EMBEDDED_TOMCAT=${{ secrets.LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_BOOT_WEB_EMBEDDED_TOMCAT }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'SPRING_SECURITY_USER_NAME=${{ secrets.SPRING_SECURITY_USER_NAME }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'SPRING_SECURITY_USER_PASSWORD=${{ secrets.SPRING_SECURITY_USER_PASSWORD }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=${{ secrets.LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'ORLEANS_STAY_APP_JWT_SECRET=${{ secrets.ORLEANS_STAY_APP_JWT_SECRET }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'ORLEANS_STAY_APP_JWT_EXPIRATIONMS=${{ secrets.ORLEANS_STAY_APP_JWT_EXPIRATIONMS }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'ORLEANS_STAY_APP_JWT_EXPIRATIONNEWPASSWORDTOKENMS=${{ secrets.ORLEANS_STAY_APP_JWT_EXPIRATIONNEWPASSWORDTOKENMS }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'WEB_CORS_ALLOWEDORIGINS=${{ secrets.WEB_CORS_ALLOWEDORIGINS }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'WEB_CORS_ALLOWEDMETHODS=${{ secrets.WEB_CORS_ALLOWEDMETHODS }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'WEB_CORS_ALLOWCREDENTIALS=${{ secrets.WEB_CORS_ALLOWCREDENTIALS }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'CLOUDINARY_FOLDER=${{ secrets.CLOUDINARY_FOLDER }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'MAILJET_API_KEY=${{ secrets.MAILJET_API_KEY }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'MAILJET_SECRET_KEY=${{ secrets.MAILJET_SECRET_KEY }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'MAILJET_RESA_ACCEPTE_TEMPLATE_ID=${{ secrets.MAILJET_RESA_ACCEPTE_TEMPLATE_ID }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'MAILJET_DEMANDE_RESA_TEMPLATE_ID=${{ secrets.MAILJET_DEMANDE_RESA_TEMPLATE_ID }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'MAILJET_DEMANDE_ARRHES_TEMPLATE_ID=${{ secrets.MAILJET_DEMANDE_ARRHES_TEMPLATE_ID }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'MAILJET_RESA_REFUSEE_TEMPLATE_ID=${{ secrets.MAILJET_RESA_REFUSEE_TEMPLATE_ID }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'MAILJET_RESA_ANNULEE_TEMPLATE_ID=${{ secrets.MAILJET_RESA_ANNULEE_TEMPLATE_ID }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'MAILJET_REINITIALISATION_MDP_TEMPLATE_ID=${{ secrets.MAILJET_REINITIALISATION_MDP_TEMPLATE_ID }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'FRONTEND_URL=${{ secrets.FRONTEND_URL }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod &&
          echo 'DOMAIN_EMAIL=${{ secrets.DOMAIN_EMAIL }}' >> /home/${{ secrets.SERVER_USER }}/orleans-stay-api/.env.prod
          "

      - name: Build Docker image and deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
          cd /home/ubuntu/orleans-stay-api &&
          docker compose down &&
          docker compose --env-file .env.prod up -d --build
          "